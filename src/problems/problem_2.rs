// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


fn fib(ceiling: i32) -> Vec<i32> {
  let mut sequence = vec!(1, 2);
  let mut next = 2;
  while next < ceiling {
    next = next + sequence[sequence.len() - 2];
    if next <= ceiling {
      sequence.push(next);
    }
  }

  sequence
}

fn sum_even(v: Vec<i32>) -> i32 {
  v.iter().filter(|i| *i % 2 == 0).sum()
}

pub fn main() -> i32 {
  sum_even(fib(4000000))
}

#[test]
fn it_can_return_a_sequence() {
  assert_eq!(vec!(1, 2, 3, 5, 8, 13, 21, 34, 55, 89), fib(89))
}

#[test]
fn it_can_sum_even_numbers() {
  assert_eq!(44, sum_even(fib(89)))
}

